#!/usr/bin/env python3

from termcolor import colored
from time import strftime
from socket import socket
from sys import argv
from pwn import log
import re


def helpmsg() -> None:
    log.info("Usage: ftpy <ip> <port (default 21)>")
    log.success("Example: ftpy 192.168.1.10")


def parsearg(argv) -> None:
    match len(argv):
        case 1:
            log.critical("Missing parameter : <ip>")
            return 
        case 2:
            if argv[1] in ['help', '--help', '-h', 'h']:
                helpmsg()
                return

            port = 21
        case 3:
            port = argv[2]

    if re.match("^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$", str(argv[1])) is None:
        log.critical("Invalid IP !")
        return

    elif re.match("^[1-9][0-9]*$", str(port)) is None:
        log.warning(f"Invalid port {port}, using default one")
        port = 21

    main(argv[1], port)

def login(s, ip) -> bool:
    log.success(f"Connected to {ip}")
    print(s.recv(20).strip().decode("UTF-8") + "\n")

    try:
        user = input("Username: ")
    except:
        return False
        
    s.send(f"USER {user}\r\n".encode())
    s.recv(32).strip().decode("UTF-8")
    
    try:
        passw = input("Password: ")
    except:
        return False

    s.send(f"PASS {passw}\r\n".encode())
    s.recv(4)
    

    if "230" in s.recv(21).strip().decode("UTF-8"):
        s.recv(4)
        return True
    else:
        return False

def interact(s) -> None:
    
    while True:

        try:
            cmd = input("ftp > ")
        except:
            cmd = "quit"

        if "quit" in cmd:
            s.send(b"quit\r\n")
            log.success("Goodbye !")
            s.close()
            return

        elif "ls" in cmd:
            
            if len(cmd.split()) != 1:
                toadd = cmd.split()[1]
            else:
                toadd = ""

            s.send(b"PASV\r\n")
    
            raw = s.recv(100).strip().decode("UTF-8")

            ip = '.'.join(raw.strip().split("(")[1].split(",")[:4])
            
            initial = raw.strip().split(",")[-2:]
            port = (int(initial[0]) * 256) + int(initial[1].replace(").", ""))
            
            pasv = socket()
            pasv.connect((ip, port))
            s.send(f"LIST {toadd}\r\n".encode())

            resp = pasv.recv(4096)

            print(resp.replace(b'\r\n', b'\n').decode())

            pasv.close()
            s.recv(1024)            
            s.recv(1024)

        elif "pwd" in cmd:
            s.send(b"PWD\r\n")
            print(s.recv(1024).decode().split('"')[1])
        
        elif "cd" in cmd:

            if not len(cmd.split()) == 1:
                s.send(f"CWD {cmd.split()[1]}\r\n".encode())
                s.recv(1024)
            else:
                log.failure("Missing argument")

        elif "mkdir" in cmd:
            if not len(cmd.split()) == 1:
                s.send(f"MKD {cmd.split()[1]}\r\n".encode())
                if not b"257" in s.recv(1024):
                    log.failure("An error has occured")

            else:
                log.failure("Missing argument")
            
        elif "rm" in cmd:
            if not len(cmd.split()) == 1:
                s.send(f"DELE {cmd.split()[1]}\r\n".encode())
                
                a = s.recv(102)
                
                if not b"250" in a:
                    log.failure("An error has occured")
            else:
                log.failure("Missing argument")


        elif "chmod" in cmd:
            if len(cmd.split()) == 3:
                
                cmd = cmd.split()[1:]

                try:
                    int(cmd[0])
                    s.send(f"SITE CHMOD {cmd[0]} {cmd[1]}\r\n".encode())

                except:
                    s.send(f"SITE CHMOD {cmd[1]} {cmd[0]}\r\n".encode())

                if not b"200" in s.recv(1024):
                    log.failure("An error has occured") 
                

            else:
                log.failure("Missing argument")

        elif "get" in cmd:
                
                if len(cmd.split()) != 1:
                    toadd = cmd.split()[1]


                    s.send(b"PASV\r\n")
            
                    raw = s.recv(100).strip().decode("UTF-8")

                    ip = '.'.join(raw.strip().split("(")[1].split(",")[:4])
                    
                    initial = raw.strip().split(",")[-2:]
                    port = (int(initial[0]) * 256) + int(initial[1].replace(").", ""))
                    
                    pasv = socket()
                    pasv.connect((ip, port))
                    s.send(f"RETR {toadd}\r\n".encode())

                    resp = pasv.recv(4096)
                    pasv.close()
                    
                    with open(toadd, 'wb') as f:
                        f.write(resp)
                    log.info("Done")
                    s.recv(1024)            
                
                else:
                    log.failure("An error occured")
     

        elif "put" in cmd:
                
                if len(cmd.split()) != 1:
                    toadd = cmd.split()[1]


                    s.send(b"PASV\r\n")
            
                    raw = s.recv(100).strip().decode("UTF-8")

                    ip = '.'.join(raw.strip().split("(")[1].split(",")[:4])
                    
                    initial = raw.strip().split(",")[-2:]
                    port = (int(initial[0]) * 256) + int(initial[1].replace(").", ""))
                    
                    pasv = socket()
                    pasv.connect((ip, port))

                    try: 
                        with open(toadd, 'rb') as f:
                            f = f.read()
                    except:
                        log.failure("Could not open the file")

                    s.send(f"STOR {toadd}\r\n".encode())

                    resp = pasv.send(f+"\r\n".encode())
                    pasv.close()
                    log.success("Done")
                
                else:
                    log.failure("Missing argument")
            

def main(ip: str, port: int):
    s = socket()
    try:
        s.connect((ip, int(port)))
    
    except ConnectionRefusedError:
        log.critical("Connection refused !")
        return
    
    except OSError:
        log.critical("Cannot reach host !")
        return
    
    if login(s, ip):
        interact(s)
    else:
        log.critical("Connection failed !")
        return

if __name__ == "__main__":
    log.info("Launching FTPy at " + strftime("%H:%M:%S"))
    parsearg(argv)
